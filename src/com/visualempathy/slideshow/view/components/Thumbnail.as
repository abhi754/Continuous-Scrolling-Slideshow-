/* * Continuous Scrolling Slideshow  * Created by Joel Hooks | joelhooks@gmail.com  * Feel free to use this however you like, but leave this comment intact. */package com.visualempathy.slideshow.view.components{		import com.visualempathy.slideshow.model.vo.ImageVO;		import flash.display.Loader;	import flash.display.Shape;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.net.URLRequest;		import mx.controls.Label;		import tween.TweenLite;		public class Thumbnail extends Sprite	{				private var _ref	:Number;		private var _source:String;		private var _width:Number		private var loader	:Loader;		private var fade	:Number = .3;		private var _backgroundColor:uint				public var imageVO:ImageVO;				public static const EVENT_CLICKED	:String		= "NavItem_Event_Clicked"		public static const ADVANCE:String				= "NavItem_Advance"		public static const SELECT:String				= "Thumbnail_Select"		/**		 * Constructor for a NavItem 		 * @param ref		 * @param source		 * @param width		 * 		 */				public function Thumbnail(ref:Number, source:String, width:Number, backgroundColor:uint = 0x000000)		{			super();			_ref = ref;			_source = source;			_width = width			_backgroundColor = backgroundColor;			this.x = ref*(width/2);			init( )				}				/**		 * Initialize the NavItem		 * @private		 */				private function init( ):void		{		    addChild( background );			addChild( image );			var label:Label = new Label( )			label.setStyle("color", 0xFFFFFF)			label.text = String(this._ref)			addChild( label );			enable();			}				private function get image( ):Loader		{		    loader = new Loader();		    var request:URLRequest = new URLRequest(_source);		    loader.load(request);		    loader.alpha = 1;		    return loader;					}				private function get background( ):Shape		{			var background:Shape = new Shape();			background.graphics.beginFill( _backgroundColor );			background.graphics.drawRect(0, 0, _width, _width);			background.graphics.endFill();			return background;		}						/**		 * Disable the selected NavItem so that it cannot		 * be selected, since it is already, you know, selected.		 * 		 */				public function disable():void {			tweenAlpha( 0.6, 1 )			deactivateMouse( )		}				/**		 * Enable an unselected NavItem for selection 		 * 		 */				public function enable():void {			tweenAlpha( 0.6, fade )			activateMouse( )		}		/**		 * Unhighlight an unselected NavItem 		 * @param e		 * @private		 */			private function out(e:Event = null):void {			tweenAlpha( 0.6, fade )		}				/**		 * Highlight an unselected NavItem 		 * @param e		 * @private		 */				private function over(e:Event = null):void {			tweenAlpha( 0.6, 1 )		}					/**		 * Tween the NavItem's alphaduring transitions 		 * @param duration		 * @param alpha		 * @private		 */				private function tweenAlpha( duration:Number, alpha:Number ):void		{			TweenLite.to(this, duration, {alpha:alpha});		}				/**		 * Add the event listeners for the NavItem 		 * @private		 */				private function activateMouse( ):void		{			buttonMode	= true;			addEventListener(MouseEvent.CLICK, clicked);			addEventListener(MouseEvent.MOUSE_OVER, over );			addEventListener(MouseEvent.MOUSE_OUT, out );					}				/**		 * Remove the NavItem's event listeners 		 * @private		 */		private function deactivateMouse( ):void		{			buttonMode	= false;			removeEventListener(MouseEvent.CLICK, clicked);			removeEventListener(MouseEvent.MOUSE_OVER, over );			removeEventListener(MouseEvent.MOUSE_OUT, out );					}				/**		 * Dispatch an event when the NavItem is clicked		 * @param e		 * @private		 */							private function clicked(e:Event = null):void {			trace(_ref)			dispatchEvent(new Event(EVENT_CLICKED));		}				public function select( ):void		{					}				/**		 *  The reference number of the NavItem		 * @return 		 * 		 */				public function get referenceNumber():Number { return _ref; }			}}